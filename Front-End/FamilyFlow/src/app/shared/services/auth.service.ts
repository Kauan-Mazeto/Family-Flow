import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, Observable, catchError, map, throwError, timeout, switchMap, finalize, of } from 'rxjs';
import { environment } from '../../../environments/environment';
import { 
  User, 
  LoginRequest, 
  RegisterRequest,
  LoginResponse, 
  RegisterResponse,
  UserMeResponse,
  ErrorResponse,
  CreateFamilyRequest,
  CreateFamilyResponse,
  EnterFamilyRequest,
  EnterFamilyResponse,
  CompleteRegisterRequest
} from '../interfaces/auth.interface';

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly API_URL = environment.apiUrl;
  private readonly endpoints = environment.endpoints;
  
  // Subject para gerenciar o estado do usu√°rio logado
  private currentUserSubject = new BehaviorSubject<User | null>(null);
  public currentUser$ = this.currentUserSubject.asObservable();
  
  // Subject para gerenciar o estado de loading
  private loadingSubject = new BehaviorSubject<boolean>(false);
  public loading$ = this.loadingSubject.asObservable();

  constructor(private http: HttpClient) {
    // Verificar se usu√°rio est√° autenticado ao inicializar
    // this.checkCurrentUser(); // Temporariamente desabilitado para debug
  }

  /**
   * Fazer login (baseado na sua rota POST /users/login)
   */
  login(credentials: LoginRequest): Observable<LoginResponse> {
    this.loadingSubject.next(true);
    console.log('AuthService: üîê Fazendo login para:', credentials.email);
    console.log('AuthService: URL completa:', `${this.API_URL}${this.endpoints.login}`);
    
    return this.http.post<LoginResponse>(
      `${this.API_URL}${this.endpoints.login}`, 
      credentials,
      { 
        withCredentials: true, // Habilitar cookies j√° que CORS est√° configurado
        headers: {
          'Content-Type': 'application/json'
        }
      }
    ).pipe(
      timeout(10000), // 10 segundos de timeout
      map(response => {
        console.log('AuthService: ‚úÖ Login realizado com sucesso:', response);
        if (response.user) {
          // Converter para o formato User completo
          const user: User = {
            id: response.user.id,
            name: response.user.name,
            email: response.user.email,
            is_active: true, // Assumindo que est√° ativo se fez login
            is_admin: false, // Vai ser definido quando buscar dados completos
            avatar_url: undefined,
            created_at: new Date().toISOString()
          };
          this.currentUserSubject.next(user);
        }
        this.loadingSubject.next(false);
        return response;
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * Registrar usu√°rio (baseado na sua rota POST /users/register)
   */
  register(userData: RegisterRequest): Observable<RegisterResponse> {
    this.loadingSubject.next(true);
    
    return this.http.post<RegisterResponse>(
      `${this.API_URL}${this.endpoints.register}`, 
      userData
    ).pipe(
      map(response => {
        this.loadingSubject.next(false);
        return response;
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * Buscar dados completos do usu√°rio atual (baseado na sua rota POST /users/me)
   */
  getCurrentUserFromServer(): Observable<UserMeResponse> {
    this.loadingSubject.next(true);
    
    return this.http.post<UserMeResponse>(
      `${this.API_URL}${this.endpoints.userMe}`,
      {}, // Body vazio, dados v√™m do token/cookie
      { withCredentials: true }
    ).pipe(
      map(response => {
        if (response.usuarioAtual) {
          this.currentUserSubject.next(response.usuarioAtual);
        }
        this.loadingSubject.next(false);
        return response;
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * Fazer logout (baseado na sua rota POST /users/logout)
   */
  logout(): Observable<any> {
    return this.http.post(
      `${this.API_URL}${this.endpoints.logout}`,
      {},
      { withCredentials: true }
    ).pipe(
      map(response => {
        this.currentUserSubject.next(null);
        return response;
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * Verificar se usu√°rio est√° logado
   */
  isLoggedIn(): boolean {
    return this.currentUserSubject.value !== null;
  }

  /**
   * Obter usu√°rio atual
   */
  getCurrentUser(): User | null {
    return this.currentUserSubject.value;
  }

  /**
   * Verificar se h√° usu√°rio autenticado no servidor
   */
  private checkCurrentUser(): void {
    this.getCurrentUserFromServer().subscribe({
      next: (response) => {
        // Usu√°rio est√° autenticado
        console.log('Usu√°rio j√° autenticado:', response.usuarioAtual);
      },
      error: (error) => {
        // Usu√°rio n√£o est√° autenticado ou token expirou
        console.log('Usu√°rio n√£o autenticado');
        this.currentUserSubject.next(null);
      }
    });
  }

  /**
   * Criar fam√≠lia (baseado na rota POST /family/create)
   */
  createFamily(familyData: CreateFamilyRequest): Observable<CreateFamilyResponse> {
    this.loadingSubject.next(true);
    console.log('AuthService: üè† Iniciando cria√ß√£o de fam√≠lia:', familyData);
    console.log('AuthService: üîó URL:', `${this.API_URL}${this.endpoints.createFamily}`);
    console.log('AuthService: üç™ Cookies dispon√≠veis:', document.cookie);
    
    return this.http.post<CreateFamilyResponse>(
      `${this.API_URL}${this.endpoints.createFamily}`,
      familyData,
      { 
        withCredentials: true,
        headers: {
          'Content-Type': 'application/json'
        },
        observe: 'response' // Para ver toda a resposta
      }
    ).pipe(
      map(fullResponse => {
        console.log('AuthService: üì• Resposta completa da cria√ß√£o de fam√≠lia:', fullResponse);
        const response = fullResponse.body as CreateFamilyResponse;
        console.log('AuthService: ‚úÖ Fam√≠lia criada com sucesso:', response);
        this.loadingSubject.next(false);
        return response;
      }),
      catchError((error) => {
        console.error('AuthService: ‚ùå ERRO DETALHADO na cria√ß√£o de fam√≠lia:');
        console.error('AuthService: üîç Erro completo:', error);
        console.error('AuthService: üìä Status HTTP:', error.status);
        console.error('AuthService: üìù Corpo do erro:', error.error);
        console.error('AuthService: üåê URL da requisi√ß√£o:', error.url);
        console.error('AuthService: ÔøΩ Headers da resposta:', error.headers);
        
        if (error.status === 401) {
          console.error('AuthService: üö´ ERRO 401 - N√£o autenticado!');
          console.error('AuthService: üç™ Cookies no momento do erro:', document.cookie);
        } else if (error.status === 0) {
          console.error('AuthService: üîó ERRO 0 - Problema de conex√£o/CORS!');
        }
        
        return this.handleError(error);
      })
    );
  }

  /**
   * Entrar na fam√≠lia (baseado na rota POST /family/enter)
   * Este m√©todo adiciona o usu√°rio √† fam√≠lia, n√£o apenas valida
   */
  enterFamily(codeData: EnterFamilyRequest): Observable<EnterFamilyResponse> {
    this.loadingSubject.next(true);
    
    return this.http.post<EnterFamilyResponse>(
      `${this.API_URL}${this.endpoints.enterFamily}`,
      codeData,
      { withCredentials: true }
    ).pipe(
      map(response => {
        this.loadingSubject.next(false);
        return response;
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * M√©todo de teste para verificar se o usu√°rio est√° autenticado
   */
  testAuthenticationStatus(): Observable<any> {
    console.log('AuthService: üîç Testando status de autentica√ß√£o...');
    return this.http.post(`${this.API_URL}${this.endpoints.userMe}`, {}, { 
      withCredentials: true,
      headers: {
        'Content-Type': 'application/json'
      }
    }).pipe(
      map(response => {
        console.log('AuthService: ‚úÖ Usu√°rio autenticado:', response);
        return response;
      }),
      catchError(error => {
        console.error('AuthService: ‚ùå Usu√°rio n√£o autenticado:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * M√©todo de teste para verificar se a autentica√ß√£o est√° funcionando
   */
  testAuth(): Observable<any> {
    console.log('AuthService: üß™ TESTE DE AUTENTICA√á√ÉO');
    console.log('AuthService: üç™ Cookies dispon√≠veis:', document.cookie);
    
    return this.http.get(
      `${this.API_URL}/family/test-auth`,
      { 
        withCredentials: true,
        headers: {
          'Content-Type': 'application/json'
        }
      }
    ).pipe(
      map(response => {
        console.log('AuthService: ‚úÖ TESTE AUTH - Usu√°rio autenticado:', response);
        return response;
      }),
      catchError(error => {
        console.error('AuthService: ‚ùå TESTE AUTH - Falha na autentica√ß√£o:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * M√©todo de teste p√∫blico para debugar cria√ß√£o de fam√≠lia
   */
  testCreateFamilyDirect(familyName: string): Observable<any> {
    console.log('AuthService: üß™ TESTE DIRETO - Criando fam√≠lia:', familyName);
    console.log('AuthService: üç™ Cookies dispon√≠veis:', document.cookie);
    
    return this.http.post(
      `${this.API_URL}${this.endpoints.createFamily}`,
      { nome_familia: familyName },
      { 
        withCredentials: true,
        headers: {
          'Content-Type': 'application/json'
        },
        observe: 'response'
      }
    ).pipe(
      map(response => {
        console.log('AuthService: ‚úÖ TESTE - Fam√≠lia criada:', response);
        return response;
      }),
      catchError(error => {
        console.error('AuthService: ‚ùå TESTE - Erro:', error);
        return throwError(() => error);
      })
    );
  }

  /**
   * M√©todo de teste para verificar conectividade com o backend
   */
  testBackendConnection(): Observable<any> {
    console.log('AuthService: Testando conex√£o com backend...');
    return this.http.get(`${this.API_URL}/users/register`, { observe: 'response' }).pipe(
      map(response => {
        console.log('AuthService: Backend respondeu:', response.status);
        return { status: 'ok', message: 'Backend conectado' };
      }),
      catchError(error => {
        console.error('AuthService: Erro de conex√£o:', error);
        return throwError(() => ({ message: 'Backend n√£o est√° respondendo' }));
      })
    );
  }

  /**
   * Validar c√≥digo de fam√≠lia (baseado na rota POST /family/enter)
   * @deprecated Use enterFamily() instead - este m√©todo faz a mesma coisa
   */
  validateFamilyCode(codeData: EnterFamilyRequest): Observable<EnterFamilyResponse> {
    return this.enterFamily(codeData);
  }

  /**
   * Registro completo com fam√≠lia - primeiro registra usu√°rio, depois cria/entra na fam√≠lia
   */
  completeRegistrationWithFamily(userData: CompleteRegisterRequest): Observable<RegisterResponse> {
    this.loadingSubject.next(true);
    
    console.log('AuthService: Iniciando registro completo com fam√≠lia:', userData);

    // Desabilitado modo de desenvolvimento para usar backend real

    // Primeiro registra o usu√°rio
    const registerData: RegisterRequest = {
      email_usuario: userData.email_usuario,
      senha_usuario: userData.senha_usuario,
      nome_usuario: userData.nome_usuario
    };

    return this.register(registerData).pipe(
      switchMap(registerResponse => {
        console.log('AuthService: ‚úÖ Registro conclu√≠do com sucesso:', registerResponse);
        console.log('AuthService: üîÑ Iniciando login autom√°tico...');
        
        // Ap√≥s registrar, faz login autom√°tico para obter autentica√ß√£o
        const loginData: LoginRequest = {
          email: userData.email_usuario,
          password: userData.senha_usuario
        };

        return this.login(loginData).pipe(
          switchMap(loginResponse => {
            console.log('AuthService: ‚úÖ Login conclu√≠do com sucesso:', loginResponse);
            console.log('AuthService: ÔøΩ Testando autentica√ß√£o antes de criar fam√≠lia...');
            
            // Aguardar um pouco para garantir que o cookie seja definido
            console.log('AuthService: ‚è±Ô∏è Aguardando cookie ser definido...');
            return new Observable(observer => {
              setTimeout(() => {
                observer.next(loginResponse);
                observer.complete();
              }, 1000); // Aguardar 1 segundo
            }).pipe(
              switchMap(() => {
                console.log('AuthService: üîç Testando autentica√ß√£o ap√≥s delay...');
                return this.testAuthenticationStatus();
              }),
              switchMap(authTest => {
                console.log('AuthService: ‚úÖ Autentica√ß√£o confirmada:', authTest);
                console.log('AuthService: ÔøΩüîÑ Processando fam√≠lia...');
                
                // Ap√≥s confirmar autentica√ß√£o, cria ou entra na fam√≠lia
                if (userData.family_option === 'create' && userData.family_name) {
                  console.log('AuthService: üè† Criando fam√≠lia:', userData.family_name);
                  return this.createFamily({ nome_familia: userData.family_name }).pipe(
                    map(familyResponse => {
                      console.log('AuthService: ‚úÖ Fam√≠lia criada com sucesso:', familyResponse);
                      return registerResponse; // Retorna a resposta original do registro
                    })
                  );
                } else if (userData.family_option === 'join' && userData.family_code) {
                  console.log('AuthService: üîó Entrando na fam√≠lia com c√≥digo:', userData.family_code);
                  return this.enterFamily({ codigo_familia_input: userData.family_code }).pipe(
                    map(familyResponse => {
                      console.log('AuthService: ‚úÖ Entrada na fam√≠lia realizada:', familyResponse);
                      return registerResponse; // Retorna a resposta original do registro
                    })
                  );
                }
                console.error('AuthService: ‚ùå Op√ß√£o de fam√≠lia inv√°lida:', userData.family_option);
                return throwError(() => ({ mensagem: 'Op√ß√£o de fam√≠lia inv√°lida' }));
              }),
              catchError(authError => {
                console.error('AuthService: ‚ùå Falha na autentica√ß√£o ap√≥s login:', authError);
                return throwError(() => ({ mensagem: 'Falha na autentica√ß√£o. Tente fazer login novamente.' }));
              })
            );
          })
        );
      }),
      finalize(() => {
        console.log('AuthService: üèÅ Finalizando processo de registro completo');
        this.loadingSubject.next(false);
      }),
      catchError((error) => {
        console.error('AuthService: ‚ùå Erro no registro completo:', error);
        return this.handleError(error);
      })
    );
  }

  /**
   * Registro completo otimizado - foco na cria√ß√£o correta do usu√°rio e fam√≠lia
   */  
  completeRegistrationWithFamilySimple(userData: CompleteRegisterRequest): Observable<RegisterResponse> {
    this.loadingSubject.next(true);
    
    console.log('AuthService: üöÄ INICIANDO PROCESSO COMPLETO:', userData);

    // 1. Registrar usu√°rio
    const registerData: RegisterRequest = {
      email_usuario: userData.email_usuario,
      senha_usuario: userData.senha_usuario,
      nome_usuario: userData.nome_usuario
    };

    return this.register(registerData).pipe(
      switchMap(registerResponse => {
        console.log('AuthService: ‚úÖ USU√ÅRIO CRIADO NO BANCO:', registerResponse);
        
        // 2. Fazer login para obter autentica√ß√£o
        const loginData: LoginRequest = {
          email: userData.email_usuario,
          password: userData.senha_usuario
        };

        return this.login(loginData).pipe(
          switchMap(loginResponse => {
            console.log('AuthService: ‚úÖ LOGIN REALIZADO:', loginResponse);
            console.log('AuthService: üç™ Cookies definidos:', document.cookie);
            
            // 3. Se deve criar fam√≠lia, fazer isso agora que est√° autenticado
            if (userData.family_option === 'create' && userData.family_name) {
              console.log('AuthService: üèóÔ∏è CRIANDO FAM√çLIA:', userData.family_name);
              
              // Primeiro, testar se a autentica√ß√£o est√° funcionando
              return this.testAuth().pipe(
                switchMap(authTest => {
                  console.log('AuthService: ‚úÖ TESTE DE AUTH PASSOU:', authTest);
                  
                  // Agora criar a fam√≠lia com dados confirmados
                  console.log('AuthService: üîß FAZENDO REQUISI√á√ÉO PARA CRIAR FAM√çLIA...');
                  console.log('AuthService: üîó URL:', `${this.API_URL}${this.endpoints.createFamily}`);
                  console.log('AuthService: üì§ Dados enviados:', { nome_familia: userData.family_name });
                  console.log('AuthService: üç™ Cookies atuais:', document.cookie);
              
                  return this.http.post<CreateFamilyResponse>(
                `${this.API_URL}${this.endpoints.createFamily}`,
                { nome_familia: userData.family_name },
                { 
                  withCredentials: true,
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                  },
                  observe: 'response' // Para ver resposta completa
                }
              ).pipe(
                map(fullResponse => {
                  console.log('AuthService: üì• RESPOSTA COMPLETA DO BACKEND:', fullResponse);
                  const familyResponse = fullResponse.body as CreateFamilyResponse;
                  console.log('AuthService: ‚úÖ FAM√çLIA CRIADA E USU√ÅRIO ADICIONADO COMO ADMIN:', familyResponse);
                  return registerResponse;
                }),
                catchError(familyError => {
                  console.error('AuthService: ‚ùå ERRO DETALHADO NA CRIA√á√ÉO DE FAM√çLIA:');
                  console.error('AuthService: üîç Erro completo:', familyError);
                  console.error('AuthService: üìä Status HTTP:', familyError.status);
                  console.error('AuthService: üìù Corpo da resposta:', familyError.error);
                  console.error('AuthService: üåê URL que falhou:', familyError.url);
                  console.error('AuthService: üìã Headers de resposta:', familyError.headers);
                  console.error('AuthService: üí¨ Mensagem:', familyError.message);
                  
                  // Log espec√≠fico para erro 500
                  if (familyError.status === 500) {
                    console.error('AuthService: üö® ERRO 500 - ERRO INTERNO DO SERVIDOR NO BACKEND!');
                    console.error('AuthService: üîç Poss√≠veis causas:');
                    console.error('AuthService: - Erro no banco de dados');
                    console.error('AuthService: - Erro na transa√ß√£o do Prisma');
                    console.error('AuthService: - Erro na valida√ß√£o do middleware authToken');
                    console.error('AuthService: - req.usuario pode estar undefined');
                  }
                  
                  // Usu√°rio foi criado com sucesso, fam√≠lia falhou
                  console.warn('AuthService: ‚ö†Ô∏è USU√ÅRIO CRIADO, MAS FAM√çLIA FALHOU');
                  return throwError(() => ({
                    mensagem: `Usu√°rio criado, mas erro na fam√≠lia: ${familyError.error?.mensagem || 'Erro interno do servidor'}`
                  }));
                })
              );
                })
              );
              
            } else if (userData.family_option === 'join' && userData.family_code) {
              console.log('AuthService: üîó ENTRANDO NA FAM√çLIA:', userData.family_code);
              
              return this.http.post<EnterFamilyResponse>(
                `${this.API_URL}${this.endpoints.enterFamily}`,
                { codigo_familia_input: userData.family_code },
                { 
                  withCredentials: true,
                  headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                  }
                }
              ).pipe(
                map(familyResponse => {
                  console.log('AuthService: ‚úÖ ENTROU NA FAM√çLIA:', familyResponse);
                  return registerResponse;
                }),
                catchError(familyError => {
                  console.error('AuthService: ‚ùå ERRO AO ENTRAR NA FAM√çLIA:', familyError);
                  return throwError(() => ({
                    mensagem: `Usu√°rio criado, mas erro ao entrar na fam√≠lia: ${familyError.error?.mensagem || 'Erro desconhecido'}`
                  }));
                })
              );
              
            } else {
              console.log('AuthService: ‚úÖ REGISTRO CONCLU√çDO SEM FAM√çLIA');
              return of(registerResponse);
            }
          })
        );
      }),
      finalize(() => {
        console.log('AuthService: üèÅ PROCESSO FINALIZADO');
        this.loadingSubject.next(false);
      }),
      catchError(this.handleError.bind(this))
    );
  }

  /**
   * Tratamento de erros HTTP baseado nas suas respostas de erro
   */
  private handleError(error: any): Observable<never> {
    this.loadingSubject.next(false);
    console.error('AuthService: Erro capturado:', error);
    
    let errorMessage = 'Erro desconhecido no servidor';
    
    // Verificar se √© um HttpErrorResponse
    if (error instanceof HttpErrorResponse) {
      console.error('AuthService: HttpErrorResponse - Status:', error.status);
      console.error('AuthService: HttpErrorResponse - Message:', error.message);
      console.error('AuthService: HttpErrorResponse - Body:', error.error);
      
      if (error.error instanceof ErrorEvent) {
        // Erro do lado cliente
        console.log('AuthService: Erro do lado cliente');
        errorMessage = `Erro de rede: ${error.error.message || 'Problema de conex√£o'}`;
      } else if (error.message?.includes('Timeout')) {
        // Erro de timeout
        console.log('AuthService: Timeout - poss√≠vel problema de CORS');
        errorMessage = 'Timeout: Verifique se o backend est√° rodando na porta 8080';
      } else {
        // Erro do backend
        console.log('AuthService: Erro do backend');
        if (error.error && error.error.mensagem) {
          errorMessage = error.error.mensagem;
        } else {
          switch (error.status) {
            case 0:
              errorMessage = 'Erro de conex√£o: Verifique se o backend est√° rodando na porta 8080';
              break;
            case 400:
              errorMessage = 'Dados inv√°lidos ou incompletos';
              break;
            case 401:
              errorMessage = 'Email ou senha inv√°lidos';
              break;
            case 409:
              errorMessage = 'Email j√° cadastrado';
              break;
            case 500:
              errorMessage = 'Erro interno do servidor';
              break;
            default:
              errorMessage = `Erro HTTP ${error.status}: ${error.message || 'Erro no servidor'}`;
          }
        }
      }
    } else {
      // Erro n√£o-HTTP (pode ser um objeto de erro personalizado)
      console.log('AuthService: Erro n√£o-HTTP:', typeof error, error);
      
      if (typeof error === 'string') {
        errorMessage = error;
      } else if (error && error.mensagem) {
        errorMessage = error.mensagem;
      } else if (error && error.message) {
        errorMessage = error.message;
      } else {
        errorMessage = 'Erro inesperado na aplica√ß√£o';
      }
    }
    
    console.log('AuthService: Mensagem de erro final:', errorMessage);
    
    const errorResponse: ErrorResponse = {
      mensagem: errorMessage
    };
    
    return throwError(() => errorResponse);
  }
}